# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true


# All files
[*]
charset = utf-8
indent_style = space
trim_trailing_whitespace = true


# Config files
[*.{xml,json,csproj,yml,yaml}]
indent_size = 2
tab_size = 2


# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
tab_size = 4

# New line preferences
end_of_line = crlf
insert_final_newline = false

#### .NET Code Actions ####

# Type members
dotnet_hide_advanced_members = false
dotnet_member_insertion_location = with_other_members_of_the_same_kind
dotnet_property_generation_behavior = prefer_throwing_properties

# Symbol search
dotnet_search_reference_assemblies = true

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = true
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning

# Expression-level preferences
dotnet_prefer_system_hash_code = true:warning
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_namespace_match_folder = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_collection_expression = when_types_loosely_match:warning
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

#### More on code style ####

# Simplify name
dotnet_diagnostic.IDE0001.severity = warning

# Simplify member access
dotnet_diagnostic.IDE0002.severity = warning

# Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = warning

# Remove unnecessary import
dotnet_diagnostic.IDE0005.severity = warning

# Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = warning

# Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# Remove unused private member
dotnet_diagnostic.IDE0051.severity = warning
# Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# Convert typeof to nameof
dotnet_diagnostic.IDE0082.severity = warning

# Remove unnecessary equality operator
dotnet_diagnostic.IDE0100.severity = warning

# Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = warning

# Simplify LINQ expression
dotnet_diagnostic.IDE0120.severity = warning

# Nullable directive is redundant
dotnet_diagnostic.IDE0240.severity = warning
# Nullable directive is unnecessary
dotnet_diagnostic.IDE0241.severity = warning

# Use nameof
dotnet_diagnostic.IDE0280.severity = warning

#### More on code quality ####

# Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = warning

# Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# Use properties where appropriate
dotnet_diagnostic.CA1024.severity = warning

# Enum storage should be Int32
dotnet_diagnostic.CA1028.severity = warning

# Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = warning

# Use integral or string argument for indexers
dotnet_diagnostic.CA1043.severity = warning

# Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = none

# Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = warning

# Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = warning

# Use ordinal StringComparison
dotnet_diagnostic.CA1309.severity = warning

# Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = warning

# Specify a culture or use an invariant version
dotnet_diagnostic.CA1311.severity = warning

# Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning

# Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = suggestion

# Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = suggestion

# Use ArgumentNullException throw helper
dotnet_diagnostic.CA1510.severity = warning
# Use ArgumentException throw helper
dotnet_diagnostic.CA1511.severity = warning
# Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = warning
# Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1513.severity = warning

# Avoid redundant length argument
dotnet_diagnostic.CA1514.severity = warning

# Do not prefix enum values with type name
dotnet_code_quality.CA1712.enum_values_prefix_trigger = AnyEnumValue

# Use Literals Where Appropriate
dotnet_diagnostic.CA1802.severity = warning

# Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = warning

# Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = warning

# Properties should not return arrays
dotnet_diagnostic.CA1819.severity = warning

# Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = warning

# Make member static
dotnet_diagnostic.CA1822.severity = warning

# Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = warning

# Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1826.severity = warning

# Do not use Count/LongCount when Any can be used
dotnet_diagnostic.CA1827.severity = warning
# Do not use CountAsync/LongCountAsync when AnyAsync can be used
dotnet_diagnostic.CA1828.severity = warning
# Use Length/Count property instead of Enumerable.Count method
dotnet_diagnostic.CA1829.severity = warning

# Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = warning

# Use AsSpan instead of Range-based indexers for string when appropriate
dotnet_diagnostic.CA1831.severity = warning
# Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array
dotnet_diagnostic.CA1832.severity = warning
# Use AsSpan or AsMemory instead of Range-based indexers for getting Span or Memory portion of an array
dotnet_diagnostic.CA1833.severity = warning

# Use StringBuilder.Append(char) for single character strings
dotnet_diagnostic.CA1834.severity = warning

# Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes
dotnet_diagnostic.CA1835.severity = warning

# Prefer IsEmpty over Count when available
dotnet_diagnostic.CA1836.severity = warning

# Prefer Dictionary Contains methods
dotnet_diagnostic.CA1841.severity = warning

# Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = warning
# Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = warning

# Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = warning
# Prefer AsSpan over Substring
dotnet_diagnostic.CA1846.severity = warning

# Use char literal for a single character lookup
dotnet_diagnostic.CA1847.severity = warning

# Call async methods when in an async method
dotnet_diagnostic.CA1849.severity = warning

# Possible multiple enumerations of IEnumerable collection
dotnet_diagnostic.CA1851.severity = warning

# Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1853.severity = warning
# Prefer the 'IDictionary.TryGetValue(TKey, out TValue)' method
dotnet_diagnostic.CA1854.severity = warning

# Use Span<T>.Clear() instead of Span<T>.Fill()
dotnet_diagnostic.CA1855.severity = warning

# Incorrect usage of ConstantExpected attribute
dotnet_diagnostic.CA1856.severity = warning
# The parameter expects a constant for optimal performance
dotnet_diagnostic.CA1857.severity = warning

# Use StartsWith instead of IndexOf
dotnet_diagnostic.CA1858.severity = warning

# Use concrete types when possible for improved performance
dotnet_diagnostic.CA1859.severity = warning

# Avoid using 'Enumerable.Any()' extension method
dotnet_diagnostic.CA1860.severity = warning

# Avoid constant arrays as arguments
dotnet_diagnostic.CA1861.severity = warning

# Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
dotnet_diagnostic.CA1864.severity = warning

# Use char overload
dotnet_diagnostic.CA1865.severity = warning
dotnet_diagnostic.CA1866.severity = warning
dotnet_diagnostic.CA1867.severity = warning

# Unnecessary call to 'Contains' for sets
dotnet_diagnostic.CA1868.severity = warning

# Cache and reuse 'JsonSerializerOptions' instances
dotnet_diagnostic.CA1869.severity = warning

# Use a cached 'SearchValues' instance
dotnet_diagnostic.CA1870.severity = warning

# Do not pass a nullable struct to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA1871.severity = warning

# Prefer 'Convert.ToHexString' and 'Convert.ToHexStringLower' over call chains based on 'BitConverter.ToString'
dotnet_diagnostic.CA1872.severity = warning

# Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = warning

# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = warning

# Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = warning

# Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = warning

# Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = warning

# Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2016.severity = warning

# Parameter count mismatch
dotnet_diagnostic.CA2017.severity = warning

# The count argument to Buffer.BlockCopy should specify the number of bytes to copy
dotnet_diagnostic.CA2018.severity = warning

# Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = warning

# Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = warning

# Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = warning

# Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning

# Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning

# Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning
# Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = warning

# Do not raise exceptions in exception clauses
dotnet_diagnostic.CA2219.severity = warning

# Override equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = warning

# Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = warning

# Collection properties should be read only
dotnet_diagnostic.CA2227.severity = warning

# Pass System.Uri objects instead of strings
dotnet_diagnostic.CA2234.severity = warning

# Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning

# Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = warning

# Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = warning

# Do not assign a symbol and its member in the same statement
dotnet_diagnostic.CA2246.severity = warning

# Use String.Equals over String.Compare
dotnet_diagnostic.CA2249.severity = warning

# Use ThrowIfCancellationRequested
dotnet_diagnostic.CA2250.severity = warning

# Use String.Equals over String.Compare
dotnet_diagnostic.CA2251.severity = warning

# Template should be a static expression
dotnet_diagnostic.CA2254.severity = warning

# Set MaxResponseHeadersLength properly
dotnet_diagnostic.CA2262.severity = warning

# Prefer generic overload when type is known
dotnet_diagnostic.CA2263.severity = warning

# Do not pass a non-nullable value to 'ArgumentNullException.ThrowIfNull'
dotnet_diagnostic.CA2264.severity = warning

# Do not compare Span<T> to null or default
dotnet_diagnostic.CA2265.severity = warning

# Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = warning
# Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = warning
# Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = warning
# Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = warning
# Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = warning
# Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = warning
# Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = warning
# Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = warning
# Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = warning
# Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = warning
# Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = warning
# Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = warning

# Do not disable request validation
dotnet_diagnostic.CA5363.severity = warning
# Do not use deprecated security protocols
dotnet_diagnostic.CA5364.severity = warning
# Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5365.severity = warning

# Use XmlReader For DataSet Read XML
dotnet_diagnostic.CA5366.severity = warning

# Use XmlReader for Deserialize
dotnet_diagnostic.CA5369.severity = warning
# Use XmlReader for validating reader
dotnet_diagnostic.CA5370.severity = warning
# Use XmlReader for schema read
dotnet_diagnostic.CA5371.severity = warning
# Use XmlReader for XPathDocument
dotnet_diagnostic.CA5372.severity = warning

# Use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5382.severity = warning
# Ensure use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5383.severity = warning

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = true:warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_lambdas = false
csharp_style_expression_bodied_local_functions = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_operators = true:warning
csharp_style_expression_bodied_properties = true:warning

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_extended_property_pattern = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = true:warning
csharp_style_prefer_switch_expression = true:warning

# Null-checking preferences
csharp_style_conditional_delegate_call = true

# Modifier preferences
csharp_prefer_static_anonymous_function = true:warning
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,protected,private,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async
csharp_style_prefer_readonly_struct = true:warning
csharp_style_prefer_readonly_struct_member = true:warning

# Code-block preferences
csharp_prefer_braces = when_multiline:warning
csharp_prefer_simple_using_statement = true:warning
csharp_prefer_system_threading_lock = true:warning
csharp_style_namespace_declarations = file_scoped:warning
csharp_style_prefer_method_group_conversion = true:warning
csharp_style_prefer_primary_constructors = false
csharp_style_prefer_top_level_statements = true:warning

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_local_over_anonymous_function = true:warning
csharp_style_prefer_null_check_over_type_check = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_prefer_tuple_swap = true:warning
csharp_style_prefer_utf8_string_literals = true:warning
csharp_style_throw_expression = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:silent
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = false
csharp_new_line_before_else = false
csharp_new_line_before_finally = false
csharp_new_line_before_open_brace = none
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = warning
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Static fields are camelCase and start with _
dotnet_naming_rule.static_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = _

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = warning
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = warning
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = warning
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Interfaces should start with I
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case
